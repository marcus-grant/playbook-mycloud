### General variables

# Ansible Settings
ansible_python_interpreter: auto

# Domains
base_domain: '{{ vault_base_domain_hetzner }}'

# time_zone: America/New_York
time_zone: Europe/Stockholm
admin_user: '{{ vault_admin_user }}'

### NTP Settings
ntp_enabled: true  # (true) | false don't use on containerized VM (docker/vbox)
ntp_timezone: '{{ time_zone }}'  # (Etc/UTC) | many others
ntp_manage_config: true  # (false) | true, whether to manage /etc/ntp.conf
ntp_area: ''  # defaults to none (world), check http://bit.ly/2Hyqoh0 for others
ntp_servers:  # defaults to below world pool (only works manage config)
  - "0{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "1{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "2{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "3{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
ntp_restrict:  # whitelists access for these hosts, loopback only by default
  - "127.0.0.1"
  - "::1"

### MySQL Geerling
# https://github.com/geerlingguy/ansible-role-mysql
mysql_user_home: /root
mysql_root_username: root
mysql_root_password: '{{ vault_mysql_root_password }}'
mysql_enabled_on_startup: true
mysql_packages:  # This sets up mariaDB as the MySQL replacement
  - mariadb-client
  - mariadb-server
  - python3-mysqldb
  - python-mysqldb


### General Settings
# Use this to enable or disable admin user access, forcing sudo & root
docker_group_admin_user: false  # disable docker group access for admin
docker_edition: 'ce'  # ce or ee
docker_home: /mnt/docker
# docker_image_directory: '{{ docker_home }}/images'
docker_storage_driver: overlay2
docker_package_state: latest  # present, absent, or latest
docker_service_state: started  # (started) | stopped *
docker_service_enabled: true  # (yes/true) | no/false *
docker_restart_handler_state: restarted  # what to do with service after role
docker_install_compose: true  # (true) | false
docker_compose_path: /usr/local/bin/docker-compose  # path to compose bin
docker_socket_mapped_path: /var/run/docker.sock

### Docker Socket Proxy
docker_socket_proxy_network: traefik
docker_socket_proxy_port: '2375'
docker_socket_proxy_image: tecnativa/docker-socket-proxy:latest


### Traefik
traefik_enabled: true
traefik_api_url: 'traefik.{{ base_domain }}'
traefik_admin_email: '{{ vault_admin_email }}'
traefik_admin_htpasswd: '{{ vault_traefik_admin_encrypted_passwd }}'
traefik_dir: '{{ docker_home }}/traefik'
traefik_api_port: '8080'
traefik_docker_networks: # The first should be the default
  - bridge
  - traefik



### Installer Role (Context-Less Program Installs)
installer_packages:
  - {method: apt, name: openssl}
  - {method: apt, name: unzip}
  - {method: apt, name: git}
  - {method: apt, name: vim}
  - {method: apt, name: tmux}
  - {method: apt, name: fzf}
  - {method: apt, name: fd-find}
  - {method: apt, name: ripgrep}
  - {method: apt, name: tree}
  - {method: apt, name: ranger}
  - {method: apt, name: ncdu}
  - {method: apt, name: htop}
  - {method: apt, name: iotop}


### Dotfiles
dotfiles_local_root_dir: '~/.dots'
dotfiles_git_server_base_url: 'github.com'
dotfiles_git_username: 'marcus-grant'
dotfiles_use_ssh: true
dotfiles:
  vim:
    repo_name: 'dots-vim'
    local_subdir_name: 'vim'
    version: 'master'
    links:
      - {dest: '~/.vim', src: '~/.dots/vim'}
      - {dest: '~/.vimrc', src: '~/.dots/vim/vimrc'}
  tmux:
    repo_name: 'dots-tmux'
    local_subdir_name: 'tmux'
    version: 'master'
    links:
      - {dest: '~/.tmux', src: '~/.dots/tmux'}
      - {dest: '~/.tmux.conf', src: '~/.dots/tmux/.tmux.conf'}